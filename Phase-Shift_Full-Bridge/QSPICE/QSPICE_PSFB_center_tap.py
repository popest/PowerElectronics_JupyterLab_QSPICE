#This file was autogenerated on 2024-12-03 23:22:05
import os
import subprocess
import pandas as pd
import re

def QSPICE_PSFB_center_tap(Coss, Cout_ESR, D, deadtime, eff, fsw_p, Iout_max, L_leak, Lout, Lp, Lr, N, Pmax, Rdiff, REC_fwd, Ron_MOS, Vin, Vout, export_traces = None):
    if export_traces is None:
         export_traces = [] 
    #### Create circuit file ####
    f = open("PSFB_center_tap.cir", "w", newline="\n")

    #### Circuit Definition ####
    f.write("* Auto-Generated Netlist File" + "\n")
    f.write("V3 Vlog 0 1" + "\n")
    f.write("S1 VIN CD high_C 0 MODSW" + "\n")
    f.write("S3 CD 0 low_D 0 MODSW" + "\n")
    f.write("S2 VIN AB high_A 0 MODSW" + "\n")
    f.write("S4 AB 0 low_B 0 MODSW" + "\n")
    f.write("L1 CD N01 {Lp} IC=0 RSER = {I_Res_Lprim}" + "\n")
    f.write("L2 N13 0 {I_Ls} RSER={I_Res_Lsec}" + "\n")
    f.write("Lout N02 Vout {Lout}" + "\n")
    f.write("R1 N08 0 {Cout_ESR}" + "\n")
    f.write("L5 N12 N01 {L_leak}" + "\n")
    f.write("D7 CD VIN ideal_MOS" + "\n")
    f.write("D4 0 CD ideal_MOS" + "\n")
    f.write("D6 AB VIN ideal_MOS" + "\n")
    f.write("D8 0 AB ideal_MOS" + "\n")
    f.write("VSENSE N03 VIN 0" + "\n")
    f.write("¥2 Vlog 0 A B B clk_neg 0 0 ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ D-FLOP TTOL = {I_ttol_factor/fsw_p}" + "\n")
    f.write("¥1 Vlog 0 C D D clk 0 0 ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ D-FLOP TTOL = {I_ttol_factor/fsw_p}" + "\n")
    f.write("C4 Cap_C CD {Coss}" + "\n")
    f.write("C6 Cap_D 0 {Coss}" + "\n")
    f.write("C7 Cap_B 0 {Coss}" + "\n")
    f.write("V6 N10 0 {1-D}" + "\n")
    f.write("¥3 Vlog 0 clk clk_neg N10 RAMP Vlog ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ HMITT VH=2m TTOL={I_ttol_factor/fsw_p}" + "\n")
    f.write("¥4 Vlog 0 low_B ¥ N05 B ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ AND TTOL={I_ttol_factor/fsw_p}" + "\n")
    f.write("¥6 Vlog 0 high_A ¥ A N04 ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ AND TTOL={I_ttol_factor/fsw_p}" + "\n")
    f.write("¥7 Vlog 0 N04 N05 A ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ OR TD={deadtime} TTOL = {I_ttol_factor/fsw_p}" + "\n")
    f.write("¥8 Vlog 0 low_D ¥ N07 D ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ AND TTOL={I_ttol_factor/fsw_p}" + "\n")
    f.write("¥9 Vlog 0 high_C ¥ C N06 ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ AND TTOL={I_ttol_factor/fsw_p}" + "\n")
    f.write("¥10 Vlog 0 N06 N07 C ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ OR TD={deadtime} TTOL = {I_ttol_factor/fsw_p}" + "\n")
    f.write("R3 N09 N02 {I_Res_Lout}" + "\n")
    f.write("V9 N03 0 {Vin}" + "\n")
    f.write("Rload Vout 0 {max(Vout/(Pmax/Vout),Vout/Iout_max)}" + "\n")
    f.write("V1 Vout N08 {Vout}" + "\n")
    f.write("R7 VIN Cap_C {Ron_MOS/10}" + "\n")
    f.write("V2 RAMP 0 PULSE 1 0 0 {(I_ttol_factor*10)/(2*fsw_p)} {(1-I_ttol_factor*10)/(2*fsw_p)} 0 {1/(2*fsw_p)}" + "\n")
    f.write("R4 VIN Cap_A {Ron_MOS/10}" + "\n")
    f.write("R5 AB Cap_B {Ron_MOS/10}" + "\n")
    f.write("R6 CD Cap_D {Ron_MOS/10}" + "\n")
    f.write("L9 AB N12 {Lr} RSER = {I_Res_Lr}" + "\n")
    f.write("L3 0 N11 {I_Ls} RSER={I_Res_Lsec}" + "\n")
    f.write("C2 Cap_A AB {Coss}" + "\n")
    f.write("C1 N14 0 1n" + "\n")
    f.write("R2 N14 Vout 1K" + "\n")
    f.write("D12 N12 VIN loc_STTH1R06AF" + "\n")
    f.write("D10 0 N12 loc_STTH1R06AF" + "\n")
    f.write("D11 N09 N14 loc_STTH1R06AF" + "\n")
    f.write("D2 N13 N09 loc_UJ3D1205" + "\n")
    f.write("D5 N11 N09 loc_UJ3D1205" + "\n")
    f.write("K2 L1 L2 L3 1" + "\n")

    #### Parameters ####
    f.write(".param Lp=" + str(Lp) + "\n")
    f.write(".param N=" + str(N) + "\n")
    f.write(".param fsw_p=" + str(fsw_p) + "\n")
    f.write(".param Lr=" + str(Lr) + "\n")
    f.write(".param Lout=" + str(Lout) + "\n")
    f.write(".param Vout=" + str(Vout) + "\n")
    f.write(".param D=" + str(D) + "\n")
    f.write(".param Vin=" + str(Vin) + "\n")
    f.write(".param Iout_max=" + str(Iout_max) + "\n")
    f.write(".param Pmax=" + str(Pmax) + "\n")
    f.write(".param L_leak=" + str(L_leak) + "\n")
    f.write(".param Ron_MOS=" + str(Ron_MOS) + "\n")
    f.write(".param deadtime=" + str(deadtime) + "\n")
    f.write(".param Rdiff=" + str(Rdiff) + "\n")
    f.write(".param eff=" + str(eff) + "\n")
    f.write(".param Coss=" + str(Coss) + "\n")
    f.write(".param REC_fwd=" + str(REC_fwd) + "\n")
    f.write(".param Cout_ESR=" + str(Cout_ESR) + "\n")
    f.write(".param I_Ls={Lp/N^2}" + "\n")
    f.write(".param TSTEP={(1/(2*fsw_p))/100}" + "\n")
    f.write(".param TSTOP={500*1/(2*fsw_p)}" + "\n")
    f.write(".param TSTART={TSTOP-6/(2*fsw_p)}" + "\n")
    f.write(".param I_Iout = (Pmax/eff)/Vout" + "\n")
    f.write(".param I_Res_Lr=1m" + "\n")
    f.write(".param I_Res_Lprim=1m" + "\n")
    f.write(".param I_Res_Lsec=1m" + "\n")
    f.write(".param I_ttol_factor = 0.0001" + "\n")
    f.write(".param I_Res_Lout = 1m" + "\n")

    #### Models ####
    f.write(".model ideal_MOS D(Vfwd=0.7,Ron={Ron_MOS}, Roff=10Meg)" + "\n")
    f.write(".model MODSW SW(ron={Ron_MOS} roff=100Meg vt=0.5 vh=-0.05 )" + "\n")
    f.write(".model ideal_REC D(Vfwd={REC_fwd},Ron={Rdiff}, Roff=10Meg)" + "\n")
    f.write(".model loc_STTH1R06AF D(Is=222e-6, N=6.42879, Rs=80e-3, Eg=1.5, XTI=.05, trs1=-4.69e-3, Cjo=22.7p, m=.18, tt=30n, Vrev=600, Iave=1)" + "\n")
    f.write(".model loc_UJ3D1205 D(Is=3.55p, N=1.43277, Rs=70.1m, XTI=3.27942, trs1=13.2m, VB=1300, nbv=3.3K, Ibv=20µ, Tbv1=-2m, Cjo=310p, m=.35, type=SiC, Vrev=1200, Iave=5)" + "\n")

    #### Spice Options ####
    f.write(".options trtol=1" + "\n")
    f.write(".options savepowers" + "\n")

    #### Measurement Definition ####
    f.write(".meas I_Lout_AVG avg I(Lout)" + "\n") # results[0]
    f.write(".meas I_Rload_AVG avg I(Rload)" + "\n") # results[1]
    f.write(".meas P_Rload_AVG avg P(Rload)" + "\n") # results[2]
    f.write(".meas P_Vin_AVG avg P(V9)" + "\n") # results[3]
    f.write(".meas V_Vout_AVG avg V(Vout)" + "\n") # results[4]
    f.write(".meas I_S2_RMS rms I(S2)" + "\n") # results[5]
    f.write(".meas I_Lout_PP PP I(Lout)" + "\n") # results[6]
    f.write(".meas V_Vout_PP PP V(Vout)" + "\n") # results[7]

    #### SPICE Analysis ####
    f.write(".tran 0 {TSTOP} {TSTART} {TSTEP}" + "\n")

    f.write(".end")

    f.close()
    results = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]

    # Assume that QSPICE is installed in its default path for non-Admin user
    exe_qspice64 = os.path.expanduser(r"~\QSPICE\QSPICE64.exe")
    exe_qpost = os.path.expanduser(r"~\QSPICE\QPOST.exe")
    exe_qux = os.path.expanduser(r"~\QSPICE\QUX.exe")

    # run QSPICE Simulation
    run_qspice64 = subprocess.run([exe_qspice64, "PSFB_center_tap.cir"])

    # Run postprocess measurement
    run_qpost = subprocess.run([exe_qpost, "PSFB_center_tap.cir", "-o", "results.txt"])

    f = open("results.txt", "r")
    results_lines = f.readlines()
    f.close()

    # Run postprocess waveforms extraction
    df = 0 
    if export_traces:
        run_qux = subprocess.run([exe_qux, "-Export", "PSFB_center_tap.qraw", export_traces, "all", "CSV"])
        df = pd.read_csv("PSFB_center_tap.csv") 
        df.columns = df.columns.str.lower() 

        #Delete Exported Waveforms CSV File 
        subprocess.run(["del", "PSFB_center_tap.csv"], shell=True) 

    # Delete Results
    subprocess.run(["del", "PSFB_center_tap.qraw"], shell=True)

    # Delete Netlist
    subprocess.run(["del", "PSFB_center_tap.cir"], shell=True)

    # Delete QPOST Results
    subprocess.run(["del", "results.txt"], shell=True)
    for i, line in enumerate(results_lines):
        stripped_line = line.strip()
        match stripped_line:
            case ".meas i_lout_avg avg i(lout):": 
                results[0] = float(re.search(r'[-+]?\d*\.\d+|\d+', results_lines[i + 1])[0])

            case ".meas i_rload_avg avg i(rload):": 
                results[1] = float(re.search(r'[-+]?\d*\.\d+|\d+', results_lines[i + 1])[0])

            case ".meas p_rload_avg avg p(rload):": 
                results[2] = float(re.search(r'[-+]?\d*\.\d+|\d+', results_lines[i + 1])[0])

            case ".meas p_vin_avg avg p(v9):": 
                results[3] = float(re.search(r'[-+]?\d*\.\d+|\d+', results_lines[i + 1])[0])

            case ".meas v_vout_avg avg v(vout):": 
                results[4] = float(re.search(r'[-+]?\d*\.\d+|\d+', results_lines[i + 1])[0])

            case ".meas i_s2_rms rms i(s2):": 
                results[5] = float(re.search(r'[-+]?\d*\.\d+|\d+', results_lines[i + 1])[0])

            case ".meas i_lout_pp pp i(lout):": 
                results[6] = float(re.search(r'[-+]?\d*\.\d+|\d+', results_lines[i + 1])[0])

            case ".meas v_vout_pp pp v(vout):": 
                results[7] = float(re.search(r'[-+]?\d*\.\d+|\d+', results_lines[i + 1])[0])

    return [df,results]