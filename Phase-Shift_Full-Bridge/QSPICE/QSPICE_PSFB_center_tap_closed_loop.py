#This file was autogenerated on 2025-04-23 01:34:19
import os
import subprocess
import pandas as pd
import re

def QSPICE_PSFB_center_tap_closed_loop(a, b, Boost, C1, C2, Coss, Cout_ESR, deadtime, eff, fc, fp, fsw_p, fz, G, Gfc, Ibias, Iout_max, kr, ks, L_leak, Lout, Lp, Lr, N, PM, Pmax, PS, R2, Rdiff, REC_fwd, Rlower, Ron_MOS, Rupper, Vin, Vout, export_traces = None):
    if export_traces is None:
         export_traces = [] 
    #### Create circuit file ####
    cir_file_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), "PSFB_center_tap_closed_loop.cir")
    results_file_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), "results.txt")
    base_dir = os.path.dirname(os.path.realpath(__file__))
    QSPICE_dir = os.path.join(base_dir, "QSPICE")
    f = open(cir_file_path, "w", newline="\n")

    #### Circuit Definition ####
    f.write("* Auto-Generated Netlist File" + "\n")
    f.write("V3 Vlog 0 1" + "\n")
    f.write("S1 VIN CD high_C 0 MODSW" + "\n")
    f.write("S3 CD 0 low_D 0 MODSW" + "\n")
    f.write("S2 VIN AB high_A 0 MODSW" + "\n")
    f.write("S4 AB 0 low_B 0 MODSW" + "\n")
    f.write("L1 N03 N02 {Lp} RSER = {I_Res_Lprim}" + "\n")
    f.write("L2 N13 0 {I_Ls} RSER={I_Res_Lsec}" + "\n")
    f.write("Lout N04 Vout {Lout}" + "\n")
    f.write("C1 Vout N10 19µ IC={Vout}" + "\n")
    f.write("R1 N10 0 {Cout_ESR}" + "\n")
    f.write("L5 CD N03 {L_leak}" + "\n")
    f.write("D7 CD VIN ideal_MOS" + "\n")
    f.write("D4 0 CD ideal_MOS" + "\n")
    f.write("D6 AB VIN ideal_MOS" + "\n")
    f.write("D8 0 AB ideal_MOS" + "\n")
    f.write("V´I_SENSE N05 VIN 0" + "\n")
    f.write("¥2 Vlog 0 A B B CLK_AB 0 0 ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ D-FLOP TTOL = {I_ttol_factor/fsw_p}" + "\n")
    f.write("¥1 Vlog 0 C D 0 0 N01 N14 ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ D-FLOP TTOL = {I_ttol_factor/fsw_p}" + "\n")
    f.write("¥4 Vlog 0 low_B ¥ N07 B ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ AND TTOL={I_ttol_factor/fsw_p}" + "\n")
    f.write("¥6 Vlog 0 high_A ¥ A N06 ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ AND TTOL={I_ttol_factor/fsw_p}" + "\n")
    f.write("¥7 Vlog 0 N06 N07 A ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ OR TD={deadtime} TTOL = {I_ttol_factor/fsw_p}" + "\n")
    f.write("¥8 Vlog 0 low_D ¥ N09 D ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ AND TTOL={I_ttol_factor/fsw_p}" + "\n")
    f.write("¥9 Vlog 0 high_C ¥ C N08 ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ AND TTOL={I_ttol_factor/fsw_p}" + "\n")
    f.write("¥10 Vlog 0 N08 N09 C ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ OR TD={deadtime} TTOL = {I_ttol_factor/fsw_p}" + "\n")
    f.write("R3 N12 N04 {I_Res_Lout}" + "\n")
    f.write("V9 N05 0 {Vin}" + "\n")
    f.write("Rload Vout 0 {max(Vout/(Pmax/Vout),Vout/Iout_max)}" + "\n")
    f.write("L9 AB N02 {Lr} RSER = {I_Res_Lr} IC=0" + "\n")
    f.write("D1 N13 N12 ideal_REC" + "\n")
    f.write("D3 N11 N12 ideal_REC" + "\n")
    f.write("L3 0 N11 {I_Ls} RSER={I_Res_Lsec}" + "\n")
    f.write("¥13 Vlog 0 N01 ¥ A N15 ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ AND TTOL = {I_ttol_factor/fsw_p}" + "\n")
    f.write("¥14 Vlog 0 N14 ¥ N15 B ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ AND TTOL = {I_ttol_factor/fsw_p}" + "\n")
    f.write("¥15 Vlog 0 ¥ N15 CLK_AB N16 ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ AND TTOL = {I_ttol_factor/fsw_p}" + "\n")
    f.write("¥16 Vlog 0 N16 ¥0 Verr N17 Vlog ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ HMITT VH=2m TTOL={I_ttol_factor/fsw_p}" + "\n")
    f.write("F3 0 N17 I_SENSE {ks}" + "\n")
    f.write("R2 N17 0 1" + "\n")
    f.write("C8 N17 0 10p IC=0" + "\n")
    f.write("D10 0 N17 ideal" + "\n")
    f.write("R12 Vout N18 {Rupper}" + "\n")
    f.write("R13 N18 N20 {R2}" + "\n")
    f.write("C13 N20 Verr {C1} IC=0" + "\n")
    f.write("C14 N18 Verr {C2} IC=0" + "\n")
    f.write("D12 N19 VCC ideal" + "\n")
    f.write("D13 0 N19 ideal" + "\n")
    f.write("G4 0 N19 N21 N18 0.00628" + "\n")
    f.write("R11 N19 0 63.7Meg" + "\n")
    f.write("C15 N19 0 1n IC=0" + "\n")
    f.write("I2 0 N21 1µ" + "\n")
    f.write("R16 N21 0 {I_Vref/1e-6}" + "\n")
    f.write("R8 N18 0 {Rlower}" + "\n")
    f.write("V2 VCC 0 5" + "\n")
    f.write("E1 N22 0 N19 0 1" + "\n")
    f.write("R9 Verr N22 10" + "\n")
    f.write("G1 0 N17 RAMP 0 {kr}" + "\n")
    f.write("V7 N23 0 {0.05}" + "\n")
    f.write("¥3 Vlog 0 ¥1 CLK_AB N23 RAMP Vlog ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ HMITT VH=2m TTOL={I_ttol_factor/fsw_p}" + "\n")
    f.write("V8 RAMP 0 PULSE 1 0 0 {(I_ttol_factor*10)/(2*fsw_p)} {(1-I_ttol_factor*10)/(2*fsw_p)} 0 {1/(2*fsw_p)}" + "\n")
    f.write("K2 L1 L2 L3 1" + "\n")

    #### Parameters ####
    f.write(".param Lp=" + str(Lp) + "\n")
    f.write(".param N=" + str(N) + "\n")
    f.write(".param fsw_p=" + str(fsw_p) + "\n")
    f.write(".param Lr=" + str(Lr) + "\n")
    f.write(".param Lout=" + str(Lout) + "\n")
    f.write(".param Vout=" + str(Vout) + "\n")
    f.write(".param Vin=" + str(Vin) + "\n")
    f.write(".param Iout_max=" + str(Iout_max) + "\n")
    f.write(".param Pmax=" + str(Pmax) + "\n")
    f.write(".param L_leak=" + str(L_leak) + "\n")
    f.write(".param Ron_MOS=" + str(Ron_MOS) + "\n")
    f.write(".param deadtime=" + str(deadtime) + "\n")
    f.write(".param Rdiff=" + str(Rdiff) + "\n")
    f.write(".param eff=" + str(eff) + "\n")
    f.write(".param Coss=" + str(Coss) + "\n")
    f.write(".param REC_fwd=" + str(REC_fwd) + "\n")
    f.write(".param Cout_ESR=" + str(Cout_ESR) + "\n")
    f.write(".param Gfc=" + str(Gfc) + "\n")
    f.write(".param PS=" + str(PS) + "\n")
    f.write(".param Boost=" + str(Boost) + "\n")
    f.write(".param fc=" + str(fc) + "\n")
    f.write(".param PM=" + str(PM) + "\n")
    f.write(".param G=" + str(G) + "\n")
    f.write(".param fp=" + str(fp) + "\n")
    f.write(".param fz=" + str(fz) + "\n")
    f.write(".param a=" + str(a) + "\n")
    f.write(".param b=" + str(b) + "\n")
    f.write(".param R2=" + str(R2) + "\n")
    f.write(".param C1=" + str(C1) + "\n")
    f.write(".param C2=" + str(C2) + "\n")
    f.write(".param Ibias=" + str(Ibias) + "\n")
    f.write(".param Rlower=" + str(Rlower) + "\n")
    f.write(".param Rupper=" + str(Rupper) + "\n")
    f.write(".param ks=" + str(ks) + "\n")
    f.write(".param kr=" + str(kr) + "\n")
    f.write(".param I_Ls={Lp/N^2}" + "\n")
    f.write(".param TSTEP={(1/(2*fsw_p))/100}" + "\n")
    f.write(".param TSTART=0" + "\n")
    f.write(".param TSTOP={10e-3}" + "\n")
    f.write(".param I_Iout = (Pmax/eff)/Vout" + "\n")
    f.write(".param I_Res_Lr=1m" + "\n")
    f.write(".param I_Res_Lprim=1m" + "\n")
    f.write(".param I_Res_Lsec=1m" + "\n")
    f.write(".param I_ttol_factor = 0.0001" + "\n")
    f.write(".param I_Res_Lout = 1m" + "\n")
    f.write(".param I_Vref = 2.5" + "\n")

    #### Models ####
    f.write(".model ideal_MOS D(Vfwd=0.7,Ron={Ron_MOS}, Roff=10Meg)" + "\n")
    f.write(".model MODSW SW(ron={Ron_MOS} roff=100Meg vt=0.5 vh=-0.05 )" + "\n")
    f.write(".model ideal_REC D(Vfwd={REC_fwd},Ron={Rdiff}, Roff=10Meg)" + "\n")
    f.write(".model ideal D(vfwd=0)" + "\n")

    #### Libs ####
    f.write(".lib C:\Users\Stani\QSPICE\Diode.txt" + "\n")

    #### Spice Options ####
    f.write(".options trtol=1" + "\n")
    f.write(".options maxord=1" + "\n")

    #### Measurement Definition ####
    f.write(".meas V_AVG_VOUT AVG V(Vout)" + "\n") # results[0]
    f.write(".meas I_AVG_IOUT AVG I(Rload)" + "\n") # results[1]

    #### SPICE Analysis ####
    f.write(".tran 0 {TSTOP} {TSTART} {TSTEP}" + "\n")

    f.write(".end")

    f.close()
    results = { 
        "V_AVG_VOUT": 0,
        "I_AVG_IOUT": 0,
    }
    # Assume that QSPICE is installed in its default path for non-Admin user
    exe_qspice64 = os.path.expanduser(r"~\QSPICE\QSPICE64.exe")
    exe_qpost = os.path.expanduser(r"~\QSPICE\QPOST.exe")
    exe_qux = os.path.expanduser(r"~\QSPICE\QUX.exe")

    # run QSPICE Simulation
    try:
        run_qspice64 = subprocess.run([exe_qspice64, "PSFB_center_tap_closed_loop.cir"], capture_output=True, text=True, check=True, cwd = base_dir)
    except subprocess.CalledProcessError as e:
        print('QSPICE64 exec output:')
        print(e.stderr)

    # Run postprocess measurement
    try:
        run_qpost = subprocess.run([exe_qpost, "PSFB_center_tap_closed_loop.cir", "-o", "results.txt"], capture_output=True, text=True, check=True, cwd = base_dir)
    except subprocess.CalledProcessError as e:
        print('QPOST exec output:')
        print(e.stderr)

    f = open(results_file_path, "r")
    results_lines = f.readlines()
    f.close()

    # Run postprocess waveforms extraction
    df = 0 
    if export_traces:
        run_qux = subprocess.run([exe_qux, "-Export", "PSFB_center_tap_closed_loop.qraw", export_traces, "all", "CSV"])
        df = pd.read_csv("PSFB_center_tap_closed_loop.csv") 
        df.columns = df.columns.str.lower() 

        #Delete Exported Waveforms CSV File 
        subprocess.run(["del", "PSFB_center_tap_closed_loop.csv"], shell=True) 

    # Delete Results
    subprocess.run(["del", "PSFB_center_tap_closed_loop.qraw"], shell=True, cwd = base_dir)

    # Delete Netlist
    subprocess.run(["del", "PSFB_center_tap_closed_loop.cir"], shell=True, cwd = base_dir)

    # Delete QPOST Results
    subprocess.run(["del", "results.txt"], shell=True, cwd = base_dir)
    for i, line in enumerate(results_lines):
        stripped_line = line.strip()
        match stripped_line:
            case ".meas v_avg_vout avg v(vout):": 
                results['V_AVG_VOUT'] = float(re.search(r'[-+]?\d*\.\d+|\d+', results_lines[i + 1])[0])

            case ".meas i_avg_iout avg i(rload):": 
                results['I_AVG_IOUT'] = float(re.search(r'[-+]?\d*\.\d+|\d+', results_lines[i + 1])[0])

    return [df,results]