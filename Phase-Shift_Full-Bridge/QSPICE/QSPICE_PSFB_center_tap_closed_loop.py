#This file was autogenerated on 2025-04-30 00:12:45
import os
import subprocess
import pandas as pd
import re
import sys

def QSPICE_PSFB_center_tap_closed_loop(Cout, Cout_ESR, D_rdiff, D_Vfwd, deadtime, eff, fc, fsw, Gfc, Iout_max, kr, ks, L_leak, L_mag, L_out_rdc, Lout, Lr, Lr_rdc, M_rdson, N, Pout_lim, PS, Vin, Vout, export_traces = None):
    if export_traces is None:
         export_traces = [] 
    #### Create circuit file ####
    cir_file_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), "PSFB_center_tap_closed_loop.cir")
    results_file_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), "results.txt")
    csv_file_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), "PSFB_center_tap_closed_loop.csv")
    base_dir = os.path.dirname(os.path.realpath(__file__))
    f = open(cir_file_path, "w", newline="\n")

    #### Circuit Definition ####
    f.write("* Auto-Generated Netlist File" + "\n")
    f.write("V3 Vlog 0 1" + "\n")
    f.write("S1 VIN CD high_C 0 MODSW" + "\n")
    f.write("S3 CD 0 low_D 0 MODSW" + "\n")
    f.write("S2 VIN AB high_A 0 MODSW" + "\n")
    f.write("S4 AB 0 low_B 0 MODSW" + "\n")
    f.write("L1 N03 N02 {L_mag} RSER = {I_Res_Lprim}" + "\n")
    f.write("L2 N13 0 {I_Ls} RSER={I_Res_Lsec}" + "\n")
    f.write("Lout N04 Vout {Lout}" + "\n")
    f.write("C1 Vout N10 {Cout} IC={Vout}" + "\n")
    f.write("R1 N10 0 {Cout_ESR}" + "\n")
    f.write("L5 CD N03 {L_leak}" + "\n")
    f.write("D7 CD VIN ideal_MOS" + "\n")
    f.write("D4 0 CD ideal_MOS" + "\n")
    f.write("D6 AB VIN ideal_MOS" + "\n")
    f.write("D8 0 AB ideal_MOS" + "\n")
    f.write("V´I_SENSE N05 VIN 0" + "\n")
    f.write("¥2 Vlog 0 A B B CLK_AB 0 0 ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ D-FLOP TTOL = {I_ttol_factor/fsw}" + "\n")
    f.write("¥1 Vlog 0 C D 0 0 N01 N14 ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ D-FLOP TTOL = {I_ttol_factor/fsw}" + "\n")
    f.write("¥4 Vlog 0 low_B ¥ N07 B ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ AND TTOL={I_ttol_factor/fsw}" + "\n")
    f.write("¥6 Vlog 0 high_A ¥ A N06 ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ AND TTOL={I_ttol_factor/fsw}" + "\n")
    f.write("¥7 Vlog 0 N06 N07 A ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ OR TD={deadtime} TTOL = {I_ttol_factor/fsw}" + "\n")
    f.write("¥8 Vlog 0 low_D ¥ N09 D ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ AND TTOL={I_ttol_factor/fsw}" + "\n")
    f.write("¥9 Vlog 0 high_C ¥ C N08 ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ AND TTOL={I_ttol_factor/fsw}" + "\n")
    f.write("¥10 Vlog 0 N08 N09 C ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ OR TD={deadtime} TTOL = {I_ttol_factor/fsw}" + "\n")
    f.write("R3 N12 N04 {L_out_rdc}" + "\n")
    f.write("V9 N05 0 {Vin}" + "\n")
    f.write("Rload Vout 0 {max(Vout/(Pout_lim/Vout),Vout/Iout_max)}" + "\n")
    f.write("L9 AB N02 {Lr} RSER = {Lr_rdc} IC=0" + "\n")
    f.write("D1 N13 N12 ideal_REC" + "\n")
    f.write("D3 N11 N12 ideal_REC" + "\n")
    f.write("L3 0 N11 {I_Ls} RSER={I_Res_Lsec}" + "\n")
    f.write("¥13 Vlog 0 N01 ¥ A N15 ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ AND TTOL = {I_ttol_factor/fsw}" + "\n")
    f.write("¥14 Vlog 0 N14 ¥ N15 B ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ AND TTOL = {I_ttol_factor/fsw}" + "\n")
    f.write("¥15 Vlog 0 ¥ N15 CLK_AB N16 ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ AND TTOL = {I_ttol_factor/fsw}" + "\n")
    f.write("¥16 Vlog 0 N16 ¥0 Verr N17 Vlog ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ HMITT VH=2m TTOL={I_ttol_factor/fsw}" + "\n")
    f.write("F3 0 N17 I_SENSE {ks}" + "\n")
    f.write("R2 N17 0 1" + "\n")
    f.write("C8 N17 0 10p IC=0" + "\n")
    f.write("D10 0 N17 ideal" + "\n")
    f.write("R12 Vout N18 {I_Rupper}" + "\n")
    f.write("R13 N18 N20 {I_R2}" + "\n")
    f.write("C13 N20 Verr {I_C1} IC=0" + "\n")
    f.write("C14 N18 Verr {I_C2} IC=0" + "\n")
    f.write("D12 N19 VCC ideal" + "\n")
    f.write("D13 0 N19 ideal" + "\n")
    f.write("G4 0 N19 N21 N18 0.00628" + "\n")
    f.write("R11 N19 0 63.7Meg" + "\n")
    f.write("C15 N19 0 1n IC=0" + "\n")
    f.write("I2 0 N21 1µ" + "\n")
    f.write("R16 N21 0 {I_Vref/1e-6}" + "\n")
    f.write("R8 N18 0 {I_Rlower}" + "\n")
    f.write("V2 VCC 0 10" + "\n")
    f.write("E1 N22 0 N19 0 1" + "\n")
    f.write("R9 Verr N22 10" + "\n")
    f.write("G1 0 N17 RAMP 0 {kr}" + "\n")
    f.write("V7 N23 0 {0.05}" + "\n")
    f.write("¥3 Vlog 0 ¥1 CLK_AB N23 RAMP Vlog ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ HMITT VH=2m TTOL={I_ttol_factor/fsw}" + "\n")
    f.write("V8 RAMP 0 PULSE 1 0 0 {(I_ttol_factor*10)/(2*fsw)} {(1-I_ttol_factor*10)/(2*fsw)} 0 {1/(2*fsw)}" + "\n")
    f.write("K2 L1 L2 L3 1" + "\n")

    #### Parameters ####
    f.write(".param L_mag=" + str(L_mag) + "\n")
    f.write(".param N=" + str(N) + "\n")
    f.write(".param fsw=" + str(fsw) + "\n")
    f.write(".param Lr=" + str(Lr) + "\n")
    f.write(".param Lout=" + str(Lout) + "\n")
    f.write(".param Vout=" + str(Vout) + "\n")
    f.write(".param Vin=" + str(Vin) + "\n")
    f.write(".param Iout_max=" + str(Iout_max) + "\n")
    f.write(".param Pout_lim=" + str(Pout_lim) + "\n")
    f.write(".param L_leak=" + str(L_leak) + "\n")
    f.write(".param M_rdson=" + str(M_rdson) + "\n")
    f.write(".param Lr_rdc=" + str(Lr_rdc) + "\n")
    f.write(".param deadtime=" + str(deadtime) + "\n")
    f.write(".param L_out_rdc=" + str(L_out_rdc) + "\n")
    f.write(".param D_rdiff=" + str(D_rdiff) + "\n")
    f.write(".param eff=" + str(eff) + "\n")
    f.write(".param Cout=" + str(Cout) + "\n")
    f.write(".param D_Vfwd=" + str(D_Vfwd) + "\n")
    f.write(".param Cout_ESR=" + str(Cout_ESR) + "\n")
    f.write(".param Gfc=" + str(Gfc) + "\n")
    f.write(".param PS=" + str(PS) + "\n")
    f.write(".param fc=" + str(fc) + "\n")
    f.write(".param ks=" + str(ks) + "\n")
    f.write(".param kr=" + str(kr) + "\n")
    f.write(".param I_Ls={L_mag/N^2}" + "\n")
    f.write(".param TSTEP={(1/(2*fsw))/150}" + "\n")
    f.write(".param TSTOP={5000*1/(2*fsw)}" + "\n")
    f.write(".param TSTART={TSTOP-6/(2*fsw)}" + "\n")
    f.write(".param I_Iout = (Pmax/eff)/Vout" + "\n")
    f.write(".param I_Res_Lprim=1m" + "\n")
    f.write(".param I_Res_Lsec=1m" + "\n")
    f.write(".param I_ttol_factor = 0.0001" + "\n")
    f.write(".param I_Vref = 2.5" + "\n")
    f.write(".param I_Boost = I_PM-PS-90" + "\n")
    f.write(".param I_PM = 65" + "\n")
    f.write(".param I_G=10^(-Gfc/20)" + "\n")
    f.write(".param I_fp=(tan(I_boost*pi/180)+sqrt((tan(I_boost*pi/180))^2+1))*fc" + "\n")
    f.write(".param I_fz=fc^2/I_fp" + "\n")
    f.write(".param I_a=sqrt((fc^2/I_fp^2)+1)" + "\n")
    f.write(".param I_b=sqrt((I_fz^2/fc^2)+1)" + "\n")
    f.write(".param I_R2=((I_a/I_b)*I_G*I_Rupper*I_fp)/(I_fp-I_fz)" + "\n")
    f.write(".param I_C1=1/(2*pi*I_R2*I_fz)" + "\n")
    f.write(".param I_C2=I_C1/(I_C1*I_R2*2*pi*I_fp-1)" + "\n")
    f.write(".param I_Ibias=1m" + "\n")
    f.write(".param I_Rlower={I_Vref/I_Ibias}" + "\n")
    f.write(".param I_Rupper={(Vout-I_Vref)/I_Ibias}" + "\n")

    #### Models ####
    f.write(".model ideal_MOS D(Vfwd=0.7,Ron={M_rdson}, Roff=10Meg)" + "\n")
    f.write(".model MODSW SW(ron={M_rdson} roff=100Meg vt=0.5 vh=-0.05 )" + "\n")
    f.write(".model ideal_REC D(Vfwd={D_Vfwd},Ron={D_rdiff}, Roff=10Meg)" + "\n")
    f.write(".model ideal D(vfwd=0)" + "\n")

    #### Libs ####
    f.write(".lib C:\\Users\\Stani\\QSPICE\\Diode.txt" + "\n")

    #### Spice Options ####
    f.write(".options trtol=1" + "\n")
    f.write(".options maxord=1" + "\n")
    f.write(".options savepowers" + "\n")

    #### Measurement Definition ####
    f.write(".meas I_Lout_AVG avg I(Lout)" + "\n") # results[0]
    f.write(".meas I_Rload_AVG avg I(Rload)" + "\n") # results[1]
    f.write(".meas P_Rload_AVG avg P(Rload)" + "\n") # results[2]
    f.write(".meas P_Vin_AVG avg P(V9)" + "\n") # results[3]
    f.write(".meas V_Vout_AVG avg V(Vout)" + "\n") # results[4]
    f.write(".meas I_S2_RMS rms I(S2)" + "\n") # results[5]
    f.write(".meas I_Lout_PP PP I(Lout)" + "\n") # results[6]
    f.write(".meas V_Vout_PP PP V(Vout)" + "\n") # results[7]
    f.write(".meas I_S1_RMS rms I(S1)" + "\n") # results[8]
    f.write(".meas I_Lprim_AVG avg I(L1)" + "\n") # results[9]
    f.write(".meas I_Lprim_RMS rms I(L1)" + "\n") # results[10]
    f.write(".meas I_Lout_RMS rms I(Lout)" + "\n") # results[11]
    f.write(".meas I_Lsec1_AVG avg I(L2)" + "\n") # results[12]
    f.write(".meas I_Lsec1_RMS rms I(L2)" + "\n") # results[13]
    f.write(".meas I_Lsec2_AVG avg I(L3)" + "\n") # results[14]
    f.write(".meas I_Lsec2_RMS rms I(L3)" + "\n") # results[15]
    f.write(".meas L_res_point FIND I(L9) WHEN V(low_b)=0.5 cross=last" + "\n") # results[16]
    f.write(".meas I_Lprim_pp pp I(L1)" + "\n") # results[17]
    f.write(".meas I_sense_RMS rms I(I_SENSE)" + "\n") # results[18]
    f.write(".meas I_sense_AVG avg I(I_SENSE)" + "\n") # results[19]
    f.write(".meas I_S1_peak max I(S1)" + "\n") # results[20]
    f.write(".meas I_S2_peak max I(S2)" + "\n") # results[21]

    #### SPICE Analysis ####
    f.write(".tran 0 {TSTOP} {TSTART} {TSTEP}" + "\n")

    f.write(".end")

    f.close()
    results = { 
        "I_Lout_AVG": 0,
        "I_Rload_AVG": 0,
        "P_Rload_AVG": 0,
        "P_Vin_AVG": 0,
        "V_Vout_AVG": 0,
        "I_S2_RMS": 0,
        "I_Lout_PP": 0,
        "V_Vout_PP": 0,
        "I_S1_RMS": 0,
        "I_Lprim_AVG": 0,
        "I_Lprim_RMS": 0,
        "I_Lout_RMS": 0,
        "I_Lsec1_AVG": 0,
        "I_Lsec1_RMS": 0,
        "I_Lsec2_AVG": 0,
        "I_Lsec2_RMS": 0,
        "L_res_point": 0,
        "I_Lprim_pp": 0,
        "I_sense_RMS": 0,
        "I_sense_AVG": 0,
        "I_S1_peak": 0,
        "I_S2_peak": 0,
    }
    # Assume that QSPICE is installed in its default path for non-Admin user
    exe_qspice64 = os.path.expanduser(r"~\QSPICE\QSPICE64.exe")
    exe_qpost = os.path.expanduser(r"~\QSPICE\QPOST.exe")
    exe_qux = os.path.expanduser(r"~\QSPICE\QUX.exe")

    # run QSPICE Simulation
    try:
        run_qspice64 = subprocess.Popen([exe_qspice64, "PSFB_center_tap_closed_loop.cir"], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True, cwd = base_dir, bufsize=1, universal_newlines=True)
        for line in run_qspice64.stdout:
            print(line, end="")
            sys.stdout.flush()

        run_qspice64.wait()

        # Check exit code after process is done
        if run_qspice64.returncode == 0:
            print("QSPICE64 simulation completed successfully.")
            print('*************** END ***************')
        else:
            print(f"QSPICE64 simulation failed with exit code {run_qspice64.returncode}.")
            raise SystemExit("Terminating execution because simulation failed.")
    except subprocess.CalledProcessError as e:
        print('QSPICE64 exec output:')
        print(e.stderr)

    # Run postprocess measurement
    try:
        run_qpost = subprocess.run([exe_qpost, "PSFB_center_tap_closed_loop.cir", "-o", "results.txt"], capture_output=True, text=True, check=True, cwd = base_dir)
    except subprocess.CalledProcessError as e:
        print('QPOST exec output:')
        print(e.stderr)

    f = open(results_file_path, "r")
    results_lines = f.readlines()
    f.close()

    # Run postprocess waveforms extraction
    df = 0 
    if export_traces:
        run_qux = subprocess.run([exe_qux, "-Export", "PSFB_center_tap_closed_loop.qraw", export_traces, "all", "CSV"], cwd = base_dir)
        df = pd.read_csv(csv_file_path) 
        df.columns = df.columns.str.lower() 

        #Delete Exported Waveforms CSV File 
        subprocess.run(["del", "PSFB_center_tap_closed_loop.csv"], shell=True, cwd = base_dir) 

    # Delete Results
    subprocess.run(["del", "PSFB_center_tap_closed_loop.qraw"], shell=True, cwd = base_dir)

    # Delete Netlist
    subprocess.run(["del", "PSFB_center_tap_closed_loop.cir"], shell=True, cwd = base_dir)

    # Delete QPOST Results
    subprocess.run(["del", "results.txt"], shell=True, cwd = base_dir)
    for i, line in enumerate(results_lines):
        stripped_line = line.strip()
        match stripped_line:
            case ".meas i_lout_avg avg i(lout):": 
                results['I_Lout_AVG'] = float(re.search(r'[-+]?\d*\.\d+|\d+', results_lines[i + 1])[0])

            case ".meas i_rload_avg avg i(rload):": 
                results['I_Rload_AVG'] = float(re.search(r'[-+]?\d*\.\d+|\d+', results_lines[i + 1])[0])

            case ".meas p_rload_avg avg p(rload):": 
                results['P_Rload_AVG'] = float(re.search(r'[-+]?\d*\.\d+|\d+', results_lines[i + 1])[0])

            case ".meas p_vin_avg avg p(v9):": 
                results['P_Vin_AVG'] = float(re.search(r'[-+]?\d*\.\d+|\d+', results_lines[i + 1])[0])

            case ".meas v_vout_avg avg v(vout):": 
                results['V_Vout_AVG'] = float(re.search(r'[-+]?\d*\.\d+|\d+', results_lines[i + 1])[0])

            case ".meas i_s2_rms rms i(s2):": 
                results['I_S2_RMS'] = float(re.search(r'[-+]?\d*\.\d+|\d+', results_lines[i + 1])[0])

            case ".meas i_lout_pp pp i(lout):": 
                results['I_Lout_PP'] = float(re.search(r'[-+]?\d*\.\d+|\d+', results_lines[i + 1])[0])

            case ".meas v_vout_pp pp v(vout):": 
                results['V_Vout_PP'] = float(re.search(r'[-+]?\d*\.\d+|\d+', results_lines[i + 1])[0])

            case ".meas i_s1_rms rms i(s1):": 
                results['I_S1_RMS'] = float(re.search(r'[-+]?\d*\.\d+|\d+', results_lines[i + 1])[0])

            case ".meas i_lprim_avg avg i(l1):": 
                results['I_Lprim_AVG'] = float(re.search(r'[-+]?\d*\.\d+|\d+', results_lines[i + 1])[0])

            case ".meas i_lprim_rms rms i(l1):": 
                results['I_Lprim_RMS'] = float(re.search(r'[-+]?\d*\.\d+|\d+', results_lines[i + 1])[0])

            case ".meas i_lout_rms rms i(lout):": 
                results['I_Lout_RMS'] = float(re.search(r'[-+]?\d*\.\d+|\d+', results_lines[i + 1])[0])

            case ".meas i_lsec1_avg avg i(l2):": 
                results['I_Lsec1_AVG'] = float(re.search(r'[-+]?\d*\.\d+|\d+', results_lines[i + 1])[0])

            case ".meas i_lsec1_rms rms i(l2):": 
                results['I_Lsec1_RMS'] = float(re.search(r'[-+]?\d*\.\d+|\d+', results_lines[i + 1])[0])

            case ".meas i_lsec2_avg avg i(l3):": 
                results['I_Lsec2_AVG'] = float(re.search(r'[-+]?\d*\.\d+|\d+', results_lines[i + 1])[0])

            case ".meas i_lsec2_rms rms i(l3):": 
                results['I_Lsec2_RMS'] = float(re.search(r'[-+]?\d*\.\d+|\d+', results_lines[i + 1])[0])

            case ".meas l_res_point find i(l9) when v(low_b)=0.5 cross=last:": 
                results['L_res_point'] = float(re.search(r'[-+]?\d*\.\d+|\d+', results_lines[i + 1])[0])

            case ".meas i_lprim_pp pp i(l1):": 
                results['I_Lprim_pp'] = float(re.search(r'[-+]?\d*\.\d+|\d+', results_lines[i + 1])[0])

            case ".meas i_sense_rms rms i(i_sense):": 
                results['I_sense_RMS'] = float(re.search(r'[-+]?\d*\.\d+|\d+', results_lines[i + 1])[0])

            case ".meas i_sense_avg avg i(i_sense):": 
                results['I_sense_AVG'] = float(re.search(r'[-+]?\d*\.\d+|\d+', results_lines[i + 1])[0])

            case ".meas i_s1_peak max i(s1):": 
                results['I_S1_peak'] = float(re.search(r'[-+]?\d*\.\d+|\d+', results_lines[i + 1])[0])

            case ".meas i_s2_peak max i(s2):": 
                results['I_S2_peak'] = float(re.search(r'[-+]?\d*\.\d+|\d+', results_lines[i + 1])[0])

    return [df,results]