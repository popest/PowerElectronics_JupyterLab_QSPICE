#This file was autogenerated on 2024-10-09 23:57:08
import os
import subprocess
import pandas as pd

def QSPICE_CCM_Boost_PFC_AMC(Cout, eff, ESR, freq, fsw, fwd_boost, fwd_REC, IMUL, kMUL, L, Pout, rdiff_boost, rdiff_REC, Res_L, Ri, ron_SW, Vin_rms, Vout, export_traces = None):
    if export_traces is None:
         export_traces = [] 
    #### Create circuit file ####
    f = open("CCM_Boost_PFC_AMC.cir", "w", encoding="ascii", newline="\n")

    #### Circuit Definition ####
    f.write("* Auto-Generated Netlist File" + "\n")
    f.write("D1 N01 N04 REC" + "\n")
    f.write("V1 N03 N02 SIN 0 {Vin_rms*sqrt(2)} {freq}" + "\n")
    f.write("D2 N02 N04 REC" + "\n")
    f.write("D3 0 N01 REC" + "\n")
    f.write("D4 0 N02 REC" + "\n")
    f.write("L1 N13 N05 {L}" + "\n")
    f.write("D5 N05 OUT boostD" + "\n")
    f.write("D6 N04 OUT REC" + "\n")
    f.write("C1 OUT N11 {Cout} IC=0" + "\n")
    f.write("S1 N05 0 PWM 0 MODSW" + "\n")
    f.write("R2 N09 N07 1K" + "\n")
    f.write("R3 N07 N06 43.2K" + "\n")
    f.write("C2 N06 N08 552p" + "\n")
    f.write("C3 N07 N08 62p" + "\n")
    f.write("V3 VCC 0 15" + "\n")
    f.write("V4 VEE 0 0" + "\n")
    f.write("¥3 VLOG 0 PWM ¥ N08 SAW VLOG ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ ¥ HMITT TTOL={I_ttol_factor/fsw} VH=2m" + "\n")
    f.write("V7 VLOG 0 1" + "\n")
    f.write("C7 N04 N14 1µ" + "\n")
    f.write("D7 0 N05 ideal" + "\n")
    f.write("B2 0 N10 I=V(LINE_FWD)*V(Verr)" + "\n")
    f.write("R4 N11 0 {ESR}" + "\n")
    f.write("G1 0 LINE_FWD N04 0 I_kVin" + "\n")
    f.write("R5 LINE_FWD 0 1" + "\n")
    f.write("G2 0 N12 OUT 0 {2.5/Vout}" + "\n")
    f.write("R8 N12 0 1" + "\n")
    f.write("R1 OUT 0 {Vout*Vout/(Pout/eff)}" + "\n")
    f.write("V2 N03 N01 0" + "\n")
    f.write("V8 SAW 0 PULSE {1/I_kMOD} 0 0 {(I_ttol_factor*10)/fsw} {(1-I_ttol_factor*10)/fsw} 0 {1/fsw}" + "\n")
    f.write("R10 N04 N13 {Res_L}" + "\n")
    f.write("R11 N14 0 1m" + "\n")
    f.write("H1 N09 0 L1 {Ri}" + "\n")
    f.write("R6 N10 0 1" + "\n")
    f.write("R12 N12 N15 68K" + "\n")
    f.write("R13 N15 N16 91.6K" + "\n")
    f.write("C6 N16 Verr 754n" + "\n")
    f.write("C8 N15 Verr 36n" + "\n")
    f.write("D8 Verr VCC ideal" + "\n")
    f.write("D9 0 Verr ideal" + "\n")
    f.write("D10 N08 VCC ideal" + "\n")
    f.write("D11 0 N08 ideal" + "\n")
    f.write("G3 0 N08 N10 N07 100K" + "\n")
    f.write("R14 N08 0 1" + "\n")
    f.write("C4 N08 0 100K/10Meg/2/pi" + "\n")
    f.write("G4 0 Verr N17 N15 100K" + "\n")
    f.write("R9 Verr 0 1" + "\n")
    f.write("C5 Verr 0 100K/10Meg/2/pi" + "\n")
    f.write("I1 0 N17 1µ" + "\n")
    f.write("R15 N17 0 2.5Meg" + "\n")
    f.write("C9 N17 0 20n IC=0" + "\n")

    #### Parameters ####
    f.write(".param kMUL=" + str(kMUL) + "\n")
    f.write(".param eff=" + str(eff) + "\n")
    f.write(".param Pout=" + str(Pout) + "\n")
    f.write(".param Vout=" + str(Vout) + "\n")
    f.write(".param fsw=" + str(fsw) + "\n")
    f.write(".param ESR=" + str(ESR) + "\n")
    f.write(".param Cout=" + str(Cout) + "\n")
    f.write(".param fwd_REC=" + str(fwd_REC) + "\n")
    f.write(".param rdiff_REC=" + str(rdiff_REC) + "\n")
    f.write(".param ron_SW=" + str(ron_SW) + "\n")
    f.write(".param fwd_boost=" + str(fwd_boost) + "\n")
    f.write(".param rdiff_boost=" + str(rdiff_boost) + "\n")
    f.write(".param L=" + str(L) + "\n")
    f.write(".param Vin_rms=" + str(Vin_rms) + "\n")
    f.write(".param freq=" + str(freq) + "\n")
    f.write(".param Res_L=" + str(Res_L) + "\n")
    f.write(".param IMUL=" + str(IMUL) + "\n")
    f.write(".param Ri=" + str(Ri) + "\n")
    f.write(".param I_kMOD=0.2" + "\n")
    f.write(".param TSTART={TSTOP-1/freq}" + "\n")
    f.write(".param TSTOP={1}" + "\n")
    f.write(".param TSTEP={(1/fsw)/50}" + "\n")
    f.write(".param I_ttol_factor = 0.00001" + "\n")
    f.write(".param I_kVin=600µ" + "\n")

    #### Models ####
    f.write(".model MODSW SW(ron={ron_SW} roff=10Meg vt=0.5 vh=2m TTOL={I_ttol_factor/fsw})" + "\n")
    f.write(".model REC D(Vfwd={fwd_REC},Ron={rdiff_REC}, Roff = 10Meg, Cjo=10p)" + "\n")
    f.write(".model ideal D(Vfwd=0,Ron=1m, Roff=10Meg)" + "\n")
    f.write(".model boostD D(Vfwd={fwd_boost},Ron={rdiff_boost}, Roff = 10Meg)" + "\n")
    f.write(".model REC2 D(IS=15.1e-6, Rs=2.96m, CJO=111p, M=0.333, N=2.84, TT=4.32µ)" + "\n")

    #### Spice Options ####
    f.write(".options savepowers" + "\n")
    f.write(".options trtol=1" + "\n")

    #### Measurement Definition ####
    f.write(".meas I_L_RMS rms I(L1)" + "\n") # results[0]

    #### SPICE Analysis ####
    f.write(".tran 0 {TSTOP} {TSTART} {TSTEP}" + "\n")

    f.write(".end")

    f.close()
    results = [0.0]

    # Assume that QSPICE is installed in its default path for non-Admin user
    exe_qspice64 = os.path.expanduser(r"~\QSPICE\QSPICE64.exe")
    exe_qpost = os.path.expanduser(r"~\QSPICE\QPOST.exe")
    exe_qux = os.path.expanduser(r"~\QSPICE\QUX.exe")

    # run QSPICE Simulation
    run_qspice64 = subprocess.run([exe_qspice64, "CCM_Boost_PFC_AMC.cir"])

    # Run postprocess measurement
    run_qpost = subprocess.run([exe_qpost, "CCM_Boost_PFC_AMC.cir", "-o", "results.txt"])

    f = open("results.txt", "r")
    results_lines = f.readlines()
    f.close()

    # Run postprocess waveforms extraction
    df = 0 
    if export_traces:
        run_qux = subprocess.run([exe_qux, "-Export", "CCM_Boost_PFC_AMC.qraw", export_traces, "all", "CSV"])
        df = pd.read_csv("CCM_Boost_PFC_AMC.csv") 
        df.columns = df.columns.str.lower() 

        #Delete Exported Waveforms CSV File 
        subprocess.run(["del", "CCM_Boost_PFC_AMC.csv"], shell=True) 

    # Delete Results
    subprocess.run(["del", "CCM_Boost_PFC_AMC.qraw"], shell=True)

    # Delete Netlist
    subprocess.run(["del", "CCM_Boost_PFC_AMC.cir"], shell=True)

    # Delete QPOST Results
    subprocess.run(["del", "results.txt"], shell=True)
    for i, line in enumerate(results_lines):
        stripped_line = line.strip()
        match stripped_line:
            case ".meas i_l_rms rms i(l1):": 
                results[0] = float(results_lines[i + 1])

    return [df,results]